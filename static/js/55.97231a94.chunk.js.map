{"version":3,"file":"static/js/55.97231a94.chunk.js","mappings":"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","sources":["page/Auth/SigninPage/SigninPage.jsx"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n   Button,\r\n   Container,\r\n   AuthSection,\r\n   AuthForm,\r\n   AuthTitle,\r\n   WrapField,\r\n   AuthField,\r\n   AuthLink,\r\n   ErrorMessageStyled,\r\n   WrapFields,\r\n   NameIcon,\r\n   LockIcon,\r\n   MailIcon,\r\n   ValidCheckIcon,\r\n   InvalidCheckIcon,\r\n} from \"../AuthPage.styled\";\r\nimport { loginThunk } from \"../../../redux/thunk/auth/authThunk\";\r\nimport { selectIsLoadingAuth } from \"../../../redux/selector/selectors\";\r\nimport Loader from \"../../../components/Loader/Loader\";\r\n\r\nconst LoginPage = () => {\r\n   const dispatch = useDispatch();\r\n   const isLoading = useSelector(selectIsLoadingAuth);\r\n\r\n   const handleSubmit = (values, actions) => {\r\n      const user = {\r\n         email: values.email,\r\n         password: values.password,\r\n      };\r\n\r\n      console.log(user);\r\n\r\n      dispatch(loginThunk(user));\r\n      actions.resetForm();\r\n   };\r\n\r\n   const validationSchema = Yup.object({\r\n      email: Yup.string()\r\n         .matches(\r\n            /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            \"Invalid email address\"\r\n         )\r\n         .required(\"Email is required\"),\r\n      password: Yup.string()\r\n         .required(\"Password is required\")\r\n         .min(6, \"Password must be at least 6 characters\"),\r\n   });\r\n\r\n   const checkFieldValid = (errors, touched, fieldName) => {\r\n      switch (true) {\r\n         case errors[fieldName] && touched[fieldName]:\r\n            return \"invalid\";\r\n         case !errors[fieldName] && touched[fieldName]:\r\n            return \"valid\";\r\n         default:\r\n            return \"\";\r\n      }\r\n   };\r\n\r\n   return (\r\n      <AuthSection>\r\n         <Container>\r\n            <Formik\r\n               initialValues={{ email: \"\", password: \"\" }}\r\n               validationSchema={validationSchema}\r\n               onSubmit={handleSubmit}\r\n            >\r\n               {({ errors, touched }) => (\r\n                  <div>\r\n                     <AuthForm>\r\n                        <AuthTitle>Sign In</AuthTitle>\r\n                        <WrapFields>\r\n                           <WrapField>\r\n                              <MailIcon\r\n                                 invalid={checkFieldValid(errors, touched, \"email\")}\r\n                                 valid={checkFieldValid(errors, touched, \"email\")}\r\n                              />\r\n                              <AuthField\r\n                                 type=\"email\"\r\n                                 name=\"email\"\r\n                                 placeholder=\"Email\"\r\n                                 autoComplete=\"username\"\r\n                                 invalid={checkFieldValid(errors, touched, \"email\")}\r\n                                 valid={checkFieldValid(errors, touched, \"email\")}\r\n                              />\r\n\r\n                              {!errors.email && touched.email && <ValidCheckIcon />}\r\n                              {errors.email && touched.email && <InvalidCheckIcon />}\r\n                              {errors.email && touched.email && (\r\n                                 <ErrorMessageStyled>{errors.email}</ErrorMessageStyled>\r\n                              )}\r\n                           </WrapField>\r\n                           <WrapField>\r\n                              <LockIcon\r\n                                 invalid={checkFieldValid(errors, touched, \"password\")}\r\n                                 valid={checkFieldValid(errors, touched, \"password\")}\r\n                              />\r\n                              <AuthField\r\n                                 type=\"password\"\r\n                                 name=\"password\"\r\n                                 placeholder=\"Password\"\r\n                                 autoComplete=\"current-password\"\r\n                                 invalid={checkFieldValid(errors, touched, \"password\")}\r\n                                 valid={checkFieldValid(errors, touched, \"password\")}\r\n                              />\r\n                              {!errors.password && touched.password && <ValidCheckIcon />}\r\n                              {errors.password && touched.password && <InvalidCheckIcon />}\r\n                              {errors.password && touched.password && (\r\n                                 <ErrorMessageStyled>{errors.password}</ErrorMessageStyled>\r\n                              )}\r\n                           </WrapField>\r\n                        </WrapFields>\r\n                        <Button type=\"submit\" disabled={isLoading}>\r\n                           {isLoading && <Loader size={\"20\"} color={\"#22252a\"} />}\r\n                           {!isLoading && \"Sign in\"}\r\n                        </Button>\r\n                     </AuthForm>\r\n                     <AuthLink to=\"/register\">Registration</AuthLink>\r\n                  </div>\r\n               )}\r\n            </Formik>\r\n         </Container>\r\n      </AuthSection>\r\n   );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":["dispatch","useDispatch","isLoading","useSelector","selectIsLoadingAuth","validationSchema","Yup","email","matches","required","password","min","checkFieldValid","errors","touched","fieldName","_jsx","AuthSection","children","Container","Formik","initialValues","onSubmit","values","actions","user","console","log","loginThunk","resetForm","_ref","_jsxs","AuthForm","AuthTitle","WrapFields","WrapField","MailIcon","invalid","valid","AuthField","type","name","placeholder","autoComplete","ValidCheckIcon","InvalidCheckIcon","ErrorMessageStyled","LockIcon","Button","disabled","Loader","size","color","AuthLink","to"],"sourceRoot":""}