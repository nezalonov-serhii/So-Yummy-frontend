{"version":3,"file":"static/js/918.5e3d0371.chunk.js","mappings":"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","sources":["page/Auth/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport { signupThunk } from \"../../../redux/thunk/auth/authThunk\";\r\nimport { selectIsLoadingAuth } from \"../../../redux/selector/selectors\";\r\n\r\nimport Loader from \"../../../components/Loader/Loader\";\r\n\r\nimport {\r\n   Button,\r\n   Container,\r\n   AuthSection,\r\n   AuthForm,\r\n   AuthTitle,\r\n   WrapField,\r\n   AuthField,\r\n   AuthLink,\r\n   ErrorMessageStyled,\r\n   WrapFields,\r\n   NameIcon,\r\n   LockIcon,\r\n   MailIcon,\r\n   ValidCheckIcon,\r\n   InvalidCheckIcon,\r\n} from \"../AuthPage.styled\";\r\n\r\nconst RegisterPage = () => {\r\n   const dispatch = useDispatch();\r\n   const isLoading = useSelector(selectIsLoadingAuth);\r\n   const handleSubmit = (values, actions) => {\r\n      const newUser = {\r\n         name: values.name,\r\n         email: values.email,\r\n         password: values.password,\r\n      };\r\n\r\n      dispatch(signupThunk(newUser));\r\n      // actions.resetForm();\r\n   };\r\n   const validationSchema = Yup.object({\r\n      name: Yup.string().required(\"Name is required\"),\r\n      email: Yup.string()\r\n         .matches(\r\n            /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            \"Invalid email address\"\r\n         )\r\n         .required(\"Email is required\"),\r\n      password: Yup.string()\r\n         .required(\"Password is required\")\r\n         .min(6, \"Password must be at least 6 characters\"),\r\n   });\r\n\r\n   const checkFieldValid = (errors, touched, fieldName) => {\r\n      switch (true) {\r\n         case errors[fieldName] && touched[fieldName]:\r\n            return \"invalid\";\r\n         case !errors[fieldName] && touched[fieldName]:\r\n            return \"valid\";\r\n         default:\r\n            return \"\";\r\n      }\r\n   };\r\n\r\n   return (\r\n      <AuthSection>\r\n         <Container>\r\n            <Formik\r\n               initialValues={{ name: \"\", email: \"\", password: \"\" }}\r\n               validationSchema={validationSchema}\r\n               onSubmit={handleSubmit}\r\n            >\r\n               {({ errors, touched }) => (\r\n                  <div>\r\n                     <AuthForm>\r\n                        <AuthTitle>Registration</AuthTitle>\r\n                        <WrapFields>\r\n                           <WrapField>\r\n                              <NameIcon\r\n                                 invalid={checkFieldValid(errors, touched, \"name\")}\r\n                                 valid={checkFieldValid(errors, touched, \"name\")}\r\n                              />\r\n                              <AuthField\r\n                                 type=\"text\"\r\n                                 name=\"name\"\r\n                                 placeholder=\"Name\"\r\n                                 invalid={checkFieldValid(errors, touched, \"name\")}\r\n                                 valid={checkFieldValid(errors, touched, \"name\")}\r\n                              />\r\n                              {!errors.name && touched.name && <ValidCheckIcon />}\r\n                              {errors.name && touched.name && <InvalidCheckIcon />}\r\n                              {errors.name && touched.name && (\r\n                                 <ErrorMessageStyled>{errors.name}</ErrorMessageStyled>\r\n                              )}\r\n                           </WrapField>\r\n                           <WrapField>\r\n                              <MailIcon\r\n                                 invalid={checkFieldValid(errors, touched, \"email\")}\r\n                                 valid={checkFieldValid(errors, touched, \"email\")}\r\n                              />\r\n                              <AuthField\r\n                                 type=\"email\"\r\n                                 name=\"email\"\r\n                                 placeholder=\"Email\"\r\n                                 autoComplete=\"username\"\r\n                                 invalid={checkFieldValid(errors, touched, \"email\")}\r\n                                 valid={checkFieldValid(errors, touched, \"email\")}\r\n                              />\r\n                              {!errors.email && touched.email && <ValidCheckIcon />}\r\n                              {errors.email && touched.email && <InvalidCheckIcon />}\r\n                              {errors.email && touched.email && (\r\n                                 <ErrorMessageStyled>{errors.email}</ErrorMessageStyled>\r\n                              )}\r\n                           </WrapField>\r\n                           <WrapField>\r\n                              <LockIcon\r\n                                 invalid={checkFieldValid(errors, touched, \"password\")}\r\n                                 valid={checkFieldValid(errors, touched, \"password\")}\r\n                              />\r\n                              <AuthField\r\n                                 type=\"password\"\r\n                                 name=\"password\"\r\n                                 placeholder=\"Password\"\r\n                                 autoComplete=\"current-password\"\r\n                                 invalid={checkFieldValid(errors, touched, \"password\")}\r\n                                 valid={checkFieldValid(errors, touched, \"password\")}\r\n                              />\r\n                              {!errors.password && touched.password && <ValidCheckIcon />}\r\n                              {errors.password && touched.password && <InvalidCheckIcon />}\r\n                              {errors.password && touched.password && (\r\n                                 <ErrorMessageStyled>{errors.password}</ErrorMessageStyled>\r\n                              )}\r\n                           </WrapField>\r\n                        </WrapFields>\r\n                        <Button type=\"submit\" disabled={isLoading}>\r\n                           {isLoading && <Loader size={\"20\"} color={\"#22252a\"} />}\r\n                           {!isLoading && \"Sign up\"}\r\n                        </Button>\r\n                     </AuthForm>\r\n                     <AuthLink to=\"/signin\">Sign In</AuthLink>\r\n                  </div>\r\n               )}\r\n            </Formik>\r\n         </Container>\r\n      </AuthSection>\r\n   );\r\n};\r\n\r\nexport default RegisterPage;\r\n"],"names":["dispatch","useDispatch","isLoading","useSelector","selectIsLoadingAuth","validationSchema","Yup","name","required","email","matches","password","min","checkFieldValid","errors","touched","fieldName","_jsx","AuthSection","children","Container","Formik","initialValues","onSubmit","values","actions","newUser","signupThunk","_ref","_jsxs","AuthForm","AuthTitle","WrapFields","WrapField","NameIcon","invalid","valid","AuthField","type","placeholder","ValidCheckIcon","InvalidCheckIcon","ErrorMessageStyled","MailIcon","autoComplete","LockIcon","Button","disabled","Loader","size","color","AuthLink","to"],"sourceRoot":""}